#!/bin/bash

if [ -z "$POSTRELEASE_RANCHER_VERSION" ]; then
  echo "Usage: POSTRELEASE_RANCHER_VERSION=<version> $0"
  exit 1
fi

echo "Checking Docker image versions for ${POSTRELEASE_RANCHER_VERSION}"

docker pull -q ranger/ranger:"${POSTRELEASE_RANCHER_VERSION}"
FOUND_VERSION=$(docker run --rm --entrypoint bash ranger/ranger:"${POSTRELEASE_RANCHER_VERSION}" -c "ranger --version" | awk -F" " '{ print $3 }')

if [ "${POSTRELEASE_RANCHER_VERSION}" != "${FOUND_VERSION}" ]; then
  echo "ERROR: Found version in Docker image is unexpected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_VERSION})"
else
  echo "OK: Found version in Docker image is expected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_VERSION})"
fi

docker pull -q ranger/ranger:latest
FOUND_LATEST_VERSION=$(docker run --rm --entrypoint bash ranger/ranger:latest -c "ranger --version" | awk -F" " '{ print $3 }')

if [ "${POSTRELEASE_RANCHER_VERSION}" != "${FOUND_LATEST_VERSION}" ]; then
  echo "ERROR: Found version in latest Docker image is unexpected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_LATEST_VERSION})"
else
  echo "OK: Found version in latest Docker image is expected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_LATEST_VERSION})"
fi

if [ "$1" = "stable" ]; then
  docker pull -q ranger/ranger:stable
  FOUND_STABLE_VERSION=$(docker run --rm --entrypoint bash ranger/ranger:stable -c "ranger --version" | awk -F" " '{ print $3 }')

  if [ "${POSTRELEASE_RANCHER_VERSION}" != "${FOUND_STABLE_VERSION}" ]; then
    echo "ERROR: Found version in stable Docker image is unexpected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_STABLE_VERSION})"
  else
    echo "OK: Found version in stable Docker image is expected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_STABLE_VERSION})"
  fi
fi

# Check if Helm binary available in PATH
if type helm_v3 >/dev/null; then
  HELM_BINARY="helm_v3"
  if [[ $(${HELM_BINARY} version --short | awk -F'.' '{ print $1}') != "v3" ]]; then
    echo "Helm version does not start with v3"
    exit 1
  fi
else
  if type helm >/dev/null; then
    HELM_BINARY="helm"
  else
    echo "Unable to find helm binary"
    exit 1
  fi
fi

LATEST_REPO="ranger-latest"

echo "Checking ${LATEST_REPO} Helm chart repository for ${POSTRELEASE_RANCHER_VERSION}"

${HELM_BINARY} repo add ${LATEST_REPO} https://releases.ranger.com/server-charts/latest > /dev/null 2>&1
${HELM_BINARY} repo update > /dev/null 2>&1

FOUND_HELMCHART_VERSION=$(${HELM_BINARY} search repo ${LATEST_REPO}/ranger -o json | jq -r .[].app_version)

if [ "${POSTRELEASE_RANCHER_VERSION}" != "${FOUND_HELMCHART_VERSION}" ]; then
  echo "ERROR: Found version in ${LATEST_REPO} chart repository is unexpected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_HELMCHART_VERSION})"
else
  echo "OK: Found version in ${LATEST_REPO} chart repository is expected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_HELMCHART_VERSION})"
fi

if [ "$POSTRELEASE_RANCHER_STABLE" = "true" ]; then
  STABLE_REPO="ranger-stable"
  echo "Checking ${STABLE_REPO} Helm chart repository for ${POSTRELEASE_RANCHER_VERSION}"

  ${HELM_BINARY} repo add ${STABLE_REPO} https://releases.ranger.com/server-charts/stable > /dev/null 2>&1
  ${HELM_BINARY} repo update > /dev/null 2>&1

  FOUND_HELMCHART_STABLE_VERSION=$(${HELM_BINARY} search repo ${STABLE_REPO}/ranger -o json | jq -r .[].app_version)

  if [ "${POSTRELEASE_RANCHER_VERSION}" != "${FOUND_HELMCHART_STABLE_VERSION}" ]; then
    echo "ERROR: Found version in ${STABLE_REPO} chart repository is unexpected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_HELMCHART_STABLE_VERSION})"
  else
    echo "OK: Found version in ${STABLE_REPO} chart repository is expected (want: ${POSTRELEASE_RANCHER_VERSION}, found: ${FOUND_HELMCHART_STABLE_VERSION})"
  fi
fi
