#!groovy

// RANCHER_VERSION resolution is first via Jenkins Build Parameter RANCHER_VERSION fed in from console,
// then from $DOCKER_TRIGGER_TAG which is sourced from the Docker Hub Jenkins plugin webhook.

def ranger_version() {
  try { if ('' != RANCHER_VERSION) { return RANCHER_VERSION } }
  catch (MissingPropertyException e) {}

  try { return DOCKER_TRIGGER_TAG }
  catch (MissingPropertyException e) {}

  echo  'Neither RANCHER_VERSION nor DOCKER_TRIGGER_TAG have been specified!'
  error()
}

def lastBuildResult() {
 def previous_build = currentBuild.getPreviousBuild()
  if ( null != previous_build ) { return previous_build.result } else { return 'UNKNOWN' }
}

def via_webhook() {
  try {
    def foo = DOCKER_TRIGGER_TAG
    return true
  } catch(MissingPropertyException) {
    return false
  }
}

// Filter out Docker Hub tags like 'latest', 'master', 'enterprise'.
// Just want things like v1.2*
def branch = "v2.1"
def ranger_version = ranger_version()
def String ranger_version_regex = "^v[\\d]\\.[\\d]\\.[\\d][\\-rc\\d]+\$"

if ( true == via_webhook() && (!(ranger_version ==~ ranger_version_regex)) ) {
  println("Received RANCHER_VERSION \'${ranger_version}\' via webhook which does not match regex \'${ranger_version_regex}\'.")
  println("** This will **not** result in a pipeline run.")
  currentBuild.result = lastBuildResult()
} else {
  if (ranger_version.startsWith("v2.2") || ranger_version.startsWith("v2.3") || ranger_version == "master-head") {
    branch = "release/v2.6"
  }
  if (env.BRANCH) {
    branch = "${BRANCH}"
  }
  try {
    node {
      def rootPath = "/src/ranger-validation/"
      def job_name = "${JOB_NAME}"
      if (job_name.contains('/')) { 
        job_names = job_name.split('/')
        job_name = job_names[job_names.size() - 1] 
      }

      def setupContainer = "${job_name}${env.BUILD_NUMBER}_setup"
      def setupContainer2 = "${job_name}${env.BUILD_NUMBER}_setup2"
      def deleteContainer = "${job_name}${env.BUILD_NUMBER}_delete"
      def deleteContainer2 = "${job_name}${env.BUILD_NUMBER}_delete2"

      def deployPytestOptions = "-k test_deploy_ranger_server"

      def deletePytestOptions = "-k test_delete_ranger_server"

      def setupResultsOut = "setup-results.xml"
      def setupResultsOut2 = "setup-results-2.xml"
      def deleteResultsOut = "delete-results.xml"
      def deleteResultsOut2 = "delete-results-2.xml"

      def imageName = "ranger-validation-${job_name}${env.BUILD_NUMBER}"
      def testsDir = "tests/v3_api/"

      def envFile = ".env"
      def rangerConfig = "ranger_env.config"

      def CATTLE_TEST_URL_2 = ""
      def ADMIN_TOKEN_2 = ""
      def USER_TOKEN_2 = ""

      def TIMEOUT = "6h"

      wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
        withFolderProperties {
          withCredentials([ string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                            string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'AWS_SSH_PEM_KEY', variable: 'AWS_SSH_PEM_KEY'),
                            string(credentialsId: 'AZURE_CLIENT_ID', variable: 'AZURE_CLIENT_ID'),
                            string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'AZURE_CLIENT_SECRET'),
                            string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZURE_SUBSCRIPTION_ID'),
                            string(credentialsId: 'ADMIN_PASSWORD', variable: 'ADMIN_PASSWORD'),
                            string(credentialsId: 'USER_PASSWORD', variable: 'USER_PASSWORD')]) {

            println "Branch: ${branch}"
            stage('Checkout') {
                deleteDir()
                checkout([
                          $class: 'GitSCM',
                          branches: [[name: "*/${branch}"]],
                          extensions: scm.extensions + [[$class: 'CleanCheckout']],
                          userRemoteConfigs: scm.userRemoteConfigs
                        ])
            }

            dir ("tests/validation/") {
              stage('Configure and Build') {
                if (env.AWS_SSH_PEM_KEY && env.AWS_SSH_KEY_NAME) {
                  dir(".ssh/") {
                    def decoded = new String(env.AWS_SSH_PEM_KEY.decodeBase64())
                    writeFile file: env.AWS_SSH_KEY_NAME, text: decoded
                  }
                }
                sh "./tests/v3_api/scripts/configure.sh"
                sh "./tests/v3_api/scripts/build.sh"
              }

              try {
                stage('Deploy Ranger server 1') {
                  try {
                    // deploy ranger server
                    sh "docker run --name ${setupContainer} -t --env-file ${envFile} " +
                      "${imageName} /bin/bash -c \'export RANCHER_SERVER_VERSION=${ranger_version} && " +
                      "pytest -v -s --junit-xml=${setupResultsOut} " +
                      "${deployPytestOptions} ${testsDir}\'"

                    // copy file containing CATTLE_TEST_URL, ADMIN_TOKEN, USER_TOKEN and load into environment variables
                    sh "docker cp ${setupContainer}:${rootPath}${testsDir}${rangerConfig} ."
                    load rangerConfig

                    CATTLE_TEST_URL_2 = "${CATTLE_TEST_URL}"
                    ADMIN_TOKEN_2 = "${ADMIN_TOKEN}"
                    USER_TOKEN_2 = "${USER_TOKEN}"
                  } catch(err) {
                    echo "Error: " + err
                    echo 'Test run had failures. Collecting results...'
                    currentBuild.result = 'FAILURE'
                  }
                }

                stage('Deploy Ranger server 2') {
                  try {
                    // deploy ranger server
                    sh "docker run --name ${setupContainer2} -t --env-file ${envFile} " +
                      "${imageName} /bin/bash -c \'export RANCHER_SERVER_VERSION=${ranger_version} && " +
                      "pytest -v -s --junit-xml=${setupResultsOut2} " +
                      "${deployPytestOptions} ${testsDir}\'"

                    // copy file containing CATTLE_TEST_URL & ADMIN_TOKEN and load into environment variables
                    sh "docker cp ${setupContainer2}:${rootPath}${testsDir}${rangerConfig} ."
                    load rangerConfig
                  } catch(err) {
                    echo "Error: " + err
                    echo 'Test run had failures. Collecting results...'
                    currentBuild.result = 'FAILURE'
                  }
                }

                // AWS_USER and AWS_AMI are currently not set in the environmental variables.
                def GO_CATTLE_TEST_URL = env.CATTLE_TEST_URL.replace('https://', '')
                env.CONFIG = env.CONFIG.replace('${CATTLE_TEST_URL}', "${GO_CATTLE_TEST_URL}")
                env.CONFIG = env.CONFIG.replace('${ADMIN_TOKEN}', env.ADMIN_TOKEN)
                env.CONFIG = env.CONFIG.replace('${AZURE_CLIENT_ID}', env.AZURE_CLIENT_ID)
                env.CONFIG = env.CONFIG.replace('${AZURE_CLIENT_SECRET}', env.AZURE_CLIENT_SECRET)
                env.CONFIG = env.CONFIG.replace('${AZURE_SUBSCRIPTION_ID}', env.AZURE_SUBSCRIPTION_ID)
                env.CONFIG = env.CONFIG.replace('${AWS_SECRET_ACCESS_KEY}', env.AWS_SECRET_ACCESS_KEY)
                env.CONFIG = env.CONFIG.replace('${AWS_ACCESS_KEY_ID}', env.AWS_ACCESS_KEY_ID)
                env.CONFIG = env.CONFIG.replace('${AWS_IAM_PROFILE}', env.AWS_IAM_PROFILE)
                env.CONFIG = env.CONFIG.replace('${AWS_REGION}', env.AWS_REGION)
                env.CONFIG = env.CONFIG.replace('${AWS_INSTANCE_TYPE}', env.AWS_INSTANCE_TYPE)
                env.CONFIG = env.CONFIG.replace('${AWS_VPC}', env.AWS_VPC)
                env.CONFIG = env.CONFIG.replace('${AWS_SECURITY_GROUPS}', env.AWS_SECURITY_GROUPS)
                env.CONFIG = env.CONFIG.replace('${AWS_SSH_PEM_KEY}', env.AWS_SSH_KEY_NAME)

                stage('Execute subjobs') {
                  try {
                      jobs = [:]
                      println "Branch: ${branch}"
                      if (ranger_version.startsWith("v2.5")){
                        if (!env.RKE_VERSION) {
                          RKE_VERSION = "v1.2.22"
                        }
                        if (!env.RANCHER_K3S_VERSION) {
                          RANCHER_K3S_VERSION = "v1.20.15+k3s1"
                        }
                      }
                      else if (ranger_version.startsWith("v2.6")){
                        if (!env.RKE_VERSION) {
                          RKE_VERSION = "v1.3.19"
                        }
                        if (!env.RANCHER_K3S_VERSION) {
                          RANCHER_K3S_VERSION = "v1.24.11+k3s1"
                        }
                      }
                      else if (ranger_version.startsWith("v2.7")){
                        if (!env.RKE_VERSION) {
                          RKE_VERSION = "v1.4.4"
                        }
                        if (!env.RANCHER_K3S_VERSION) {
                          RANCHER_K3S_VERSION = "v1.26.4+k3s1"
                        }
                      }                   

                      params = [ string(name: 'CATTLE_TEST_URL', value: "${CATTLE_TEST_URL}"),
                                string(name: 'ADMIN_TOKEN', value: "${ADMIN_TOKEN}"),
                                string(name: 'USER_TOKEN', value: "${USER_TOKEN}"),
                                string(name: 'RANCHER_SERVER_VERSION', value: "${ranger_version}"), 
                                string(name: 'BRANCH', value: branch) ]

                      params2 = [ string(name: 'CATTLE_TEST_URL', value: "${CATTLE_TEST_URL_2}"),
                                  string(name: 'ADMIN_TOKEN', value: "${ADMIN_TOKEN_2}"),
                                  string(name: 'USER_TOKEN', value: "${USER_TOKEN_2}"),
                                  string(name: 'RANCHER_SERVER_VERSION', value: "${ranger_version}"),
                                  string(name: 'RKE_VERSION', value: "${RKE_VERSION}"),
                                  string(name: 'RANCHER_K3S_VERSION', value: "${RANCHER_K3S_VERSION}"),
                                  string(name: 'BRANCH', value: branch) ]

                      goParams = [ string(name: 'TIMEOUT', value: "${TIMEOUT}"),
                                  text(name: 'CONFIG', value: "${env.CONFIG}"),
                                  string(name: 'REPO', value: "https://github.com/ranger/ranger.git"),
                                  string(name: 'BRANCH', value: branch),
                                  string(name: 'TEST_PACKAGE', value: "provisioning/..."),
                                  string(name: 'GOTEST_TESTCASE', value: "${env.GOTEST_TESTCASE}") ]

                      // Ranger server 1 is used to test RKE1, RKE2 and K3s clusters.
                      // DO Note: https://github.com/ranger/qa-tasks/issues/318
                      // jobs["do"] = { build job: 'ranger-v3_ontag_do_certification', parameters: params }
                      jobs["ec2"] = { build job: 'ranger-v3_ontag_ec2_certification', parameters: params }
                      jobs["az"] = { build job: 'ranger-v3_ontag_az_certification', parameters: params }
                      jobs["custom"] = { build job: 'ranger-v3_ontag_custom_certification', parameters: params}
                      jobs["go-provisioning"] = { build job: 'ranger_ontag_go_certification', parameters: goParams }
                      // windows note: https://github.com/ranger/dashboard/issues/6549
                      // jobs["windows"] = { build job: 'ranger-v3_ontag_windows_certification', parameters: params}
                      if (ranger_version.startsWith("v2.6") || ranger_version.startsWith("v2.7")){
                        // Ranger server 2 is used to test GKE, EKS, AKS and Imported clusters.
                        jobs["eks"] = { build job: 'ranger-v3_ontag_eks_certification', parameters: params2 }
                        jobs["aks"] = { build job: 'ranger-v3_ontag_aks_certification', parameters: params2 }
                        // gke note: https://github.com/ranger/qa-tasks/issues/429
                        // jobs["gke"] = { build job: 'ranger-v3_ontag_gke_certification', parameters: params2 }
                        
                      }
                      jobs["import"] = { build job: 'ranger-v3_ontag_import_certification', parameters: params2}
                      jobs["importk3s"] = { build job: 'ranger-v3_ontag_import_k3s_certification', parameters: params2}

                      parallel jobs
                    } catch(err) {
                      echo "Error: " + err
                    }
                }

                stage('Delete Ranger Server') {
                  if (env.RANCHER_DELETE_SERVER.toLowerCase() == "true") {
                    try {
                      sh "docker run --name ${deleteContainer} -t --env-file ${envFile} " +
                      "${imageName} /bin/bash -c \'export CATTLE_TEST_URL=${env.CATTLE_TEST_URL} && " +
                      "export ADMIN_TOKEN=${env.ADMIN_TOKEN} && export USER_TOKEN=${env.USER_TOKEN} &&"+
                      "pytest -v -s --junit-xml=${deleteResultsOut} " +
                      "${deletePytestOptions} ${testsDir}\'"
                    } catch(err) {
                      echo "Error: " + err
                    }

                    try {
                      sh "docker run --name ${deleteContainer2} -t --env-file ${envFile} " +
                      "${imageName} /bin/bash -c \'export CATTLE_TEST_URL=${CATTLE_TEST_URL_2} && " +
                      "export ADMIN_TOKEN=${ADMIN_TOKEN_2} && export USER_TOKEN=${USER_TOKEN_2} &&" +
                      "pytest -v -s --junit-xml=${deleteResultsOut2} " +
                      "${deletePytestOptions} ${testsDir}\'"
                    } catch(err) {
                      echo "Error: " + err
                    }
                  }
                }

                stage('Test Report') {
                  // copy and archive test results
                  sh "docker cp ${setupContainer}:${rootPath}${setupResultsOut} ."
                  sh "docker cp ${setupContainer2}:${rootPath}${setupResultsOut2} ."
                  sh "docker cp ${deleteContainer}:${rootPath}${deleteResultsOut} ."
                  sh "docker cp ${deleteContainer2}:${rootPath}${deleteResultsOut2} ."
                  step([$class: 'JUnitResultArchiver', testResults: "**/${setupResultsOut}"])
                  step([$class: 'JUnitResultArchiver', testResults: "**/${setupResultsOut2}"])
                  step([$class: 'JUnitResultArchiver', testResults: "**/${deleteResultsOut}"])
                  step([$class: 'JUnitResultArchiver', testResults: "**/${deleteResultsOut2}"])
                  sh "docker stop ${setupContainer}"
                  sh "docker rm -v ${setupContainer}"
                  sh "docker stop ${setupContainer2}"
                  sh "docker rm -v ${setupContainer2}"
                  sh "docker stop ${deleteContainer}"
                  sh "docker rm -v ${deleteContainer}"
                  sh "docker stop ${deleteContainer2}"
                  sh "docker rm -v ${deleteContainer2}"
                  sh "docker rmi ${imageName}"
                }
              } catch(err){
                sh "docker stop ${setupContainer}"
                sh "docker rm -v ${setupContainer}"
                sh "docker stop ${setupContainer2}"
                sh "docker rm -v ${setupContainer2}"
                sh "docker stop ${deleteContainer}"
                sh "docker rm -v ${deleteContainer}"
                sh "docker stop ${deleteContainer2}"
                sh "docker rm -v ${deleteContainer2}"
                sh "docker rmi ${imageName}"
              }
            }
          }
        }
      }
    }
  } catch(err) {
    echo "Error: " + err
  }
}
