// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	"context"
	"sync"
	"time"

	"github.com/ranger/norman/controller"
	"github.com/ranger/norman/objectclient"
	v3 "github.com/ranger/ranger/pkg/apis/management.cattle.io/v3"
	v31 "github.com/ranger/ranger/pkg/generated/norman/management.cattle.io/v3"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

var (
	lockRangerUserNotificationListerMockGet  sync.RWMutex
	lockRangerUserNotificationListerMockList sync.RWMutex
)

// Ensure, that RangerUserNotificationListerMock does implement v31.RangerUserNotificationLister.
// If this is not the case, regenerate this file with moq.
var _ v31.RangerUserNotificationLister = &RangerUserNotificationListerMock{}

// RangerUserNotificationListerMock is a mock implementation of v31.RangerUserNotificationLister.
//
//	    func TestSomethingThatUsesRangerUserNotificationLister(t *testing.T) {
//
//	        // make and configure a mocked v31.RangerUserNotificationLister
//	        mockedRangerUserNotificationLister := &RangerUserNotificationListerMock{
//	            GetFunc: func(namespace string, name string) (*v3.RangerUserNotification, error) {
//		               panic("mock out the Get method")
//	            },
//	            ListFunc: func(namespace string, selector labels.Selector) ([]*v3.RangerUserNotification, error) {
//		               panic("mock out the List method")
//	            },
//	        }
//
//	        // use mockedRangerUserNotificationLister in code that requires v31.RangerUserNotificationLister
//	        // and then make assertions.
//
//	    }
type RangerUserNotificationListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.RangerUserNotification, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.RangerUserNotification, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *RangerUserNotificationListerMock) Get(namespace string, name string) (*v3.RangerUserNotification, error) {
	if mock.GetFunc == nil {
		panic("RangerUserNotificationListerMock.GetFunc: method is nil but RangerUserNotificationLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRangerUserNotificationListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRangerUserNotificationListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedRangerUserNotificationLister.GetCalls())
func (mock *RangerUserNotificationListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRangerUserNotificationListerMockGet.RLock()
	calls = mock.calls.Get
	lockRangerUserNotificationListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RangerUserNotificationListerMock) List(namespace string, selector labels.Selector) ([]*v3.RangerUserNotification, error) {
	if mock.ListFunc == nil {
		panic("RangerUserNotificationListerMock.ListFunc: method is nil but RangerUserNotificationLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockRangerUserNotificationListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRangerUserNotificationListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRangerUserNotificationLister.ListCalls())
func (mock *RangerUserNotificationListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockRangerUserNotificationListerMockList.RLock()
	calls = mock.calls.List
	lockRangerUserNotificationListerMockList.RUnlock()
	return calls
}

var (
	lockRangerUserNotificationControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockRangerUserNotificationControllerMockAddClusterScopedHandler        sync.RWMutex
	lockRangerUserNotificationControllerMockAddFeatureHandler              sync.RWMutex
	lockRangerUserNotificationControllerMockAddHandler                     sync.RWMutex
	lockRangerUserNotificationControllerMockEnqueue                        sync.RWMutex
	lockRangerUserNotificationControllerMockEnqueueAfter                   sync.RWMutex
	lockRangerUserNotificationControllerMockGeneric                        sync.RWMutex
	lockRangerUserNotificationControllerMockInformer                       sync.RWMutex
	lockRangerUserNotificationControllerMockLister                         sync.RWMutex
)

// Ensure, that RangerUserNotificationControllerMock does implement v31.RangerUserNotificationController.
// If this is not the case, regenerate this file with moq.
var _ v31.RangerUserNotificationController = &RangerUserNotificationControllerMock{}

// RangerUserNotificationControllerMock is a mock implementation of v31.RangerUserNotificationController.
//
//	    func TestSomethingThatUsesRangerUserNotificationController(t *testing.T) {
//
//	        // make and configure a mocked v31.RangerUserNotificationController
//	        mockedRangerUserNotificationController := &RangerUserNotificationControllerMock{
//	            AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddClusterScopedFeatureHandler method")
//	            },
//	            AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddClusterScopedHandler method")
//	            },
//	            AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddFeatureHandler method")
//	            },
//	            AddHandlerFunc: func(ctx context.Context, name string, handler v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddHandler method")
//	            },
//	            EnqueueFunc: func(namespace string, name string)  {
//		               panic("mock out the Enqueue method")
//	            },
//	            EnqueueAfterFunc: func(namespace string, name string, after time.Duration)  {
//		               panic("mock out the EnqueueAfter method")
//	            },
//	            GenericFunc: func() controller.GenericController {
//		               panic("mock out the Generic method")
//	            },
//	            InformerFunc: func() cache.SharedIndexInformer {
//		               panic("mock out the Informer method")
//	            },
//	            ListerFunc: func() v31.RangerUserNotificationLister {
//		               panic("mock out the Lister method")
//	            },
//	        }
//
//	        // use mockedRangerUserNotificationController in code that requires v31.RangerUserNotificationController
//	        // and then make assertions.
//
//	    }
type RangerUserNotificationControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.RangerUserNotificationHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v31.RangerUserNotificationHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v31.RangerUserNotificationHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// EnqueueAfterFunc mocks the EnqueueAfter method.
	EnqueueAfterFunc func(namespace string, name string, after time.Duration)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v31.RangerUserNotificationLister

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v31.RangerUserNotificationHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v31.RangerUserNotificationHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.RangerUserNotificationHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v31.RangerUserNotificationHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// EnqueueAfter holds details about calls to the EnqueueAfter method.
		EnqueueAfter []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// After is the after argument value.
			After time.Duration
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RangerUserNotificationControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v31.RangerUserNotificationHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RangerUserNotificationControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but RangerUserNotificationController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRangerUserNotificationControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRangerUserNotificationControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.AddClusterScopedFeatureHandlerCalls())
func (mock *RangerUserNotificationControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRangerUserNotificationControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RangerUserNotificationControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v31.RangerUserNotificationHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RangerUserNotificationControllerMock.AddClusterScopedHandlerFunc: method is nil but RangerUserNotificationController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRangerUserNotificationControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRangerUserNotificationControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.AddClusterScopedHandlerCalls())
func (mock *RangerUserNotificationControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRangerUserNotificationControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RangerUserNotificationControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RangerUserNotificationControllerMock.AddFeatureHandlerFunc: method is nil but RangerUserNotificationController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    syncMoqParam,
	}
	lockRangerUserNotificationControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRangerUserNotificationControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.AddFeatureHandlerCalls())
func (mock *RangerUserNotificationControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRangerUserNotificationControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RangerUserNotificationControllerMock) AddHandler(ctx context.Context, name string, handler v31.RangerUserNotificationHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RangerUserNotificationControllerMock.AddHandlerFunc: method is nil but RangerUserNotificationController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRangerUserNotificationControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRangerUserNotificationControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.AddHandlerCalls())
func (mock *RangerUserNotificationControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRangerUserNotificationControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RangerUserNotificationControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("RangerUserNotificationControllerMock.EnqueueFunc: method is nil but RangerUserNotificationController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRangerUserNotificationControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRangerUserNotificationControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.EnqueueCalls())
func (mock *RangerUserNotificationControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRangerUserNotificationControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRangerUserNotificationControllerMockEnqueue.RUnlock()
	return calls
}

// EnqueueAfter calls EnqueueAfterFunc.
func (mock *RangerUserNotificationControllerMock) EnqueueAfter(namespace string, name string, after time.Duration) {
	if mock.EnqueueAfterFunc == nil {
		panic("RangerUserNotificationControllerMock.EnqueueAfterFunc: method is nil but RangerUserNotificationController.EnqueueAfter was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		After     time.Duration
	}{
		Namespace: namespace,
		Name:      name,
		After:     after,
	}
	lockRangerUserNotificationControllerMockEnqueueAfter.Lock()
	mock.calls.EnqueueAfter = append(mock.calls.EnqueueAfter, callInfo)
	lockRangerUserNotificationControllerMockEnqueueAfter.Unlock()
	mock.EnqueueAfterFunc(namespace, name, after)
}

// EnqueueAfterCalls gets all the calls that were made to EnqueueAfter.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.EnqueueAfterCalls())
func (mock *RangerUserNotificationControllerMock) EnqueueAfterCalls() []struct {
	Namespace string
	Name      string
	After     time.Duration
} {
	var calls []struct {
		Namespace string
		Name      string
		After     time.Duration
	}
	lockRangerUserNotificationControllerMockEnqueueAfter.RLock()
	calls = mock.calls.EnqueueAfter
	lockRangerUserNotificationControllerMockEnqueueAfter.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *RangerUserNotificationControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("RangerUserNotificationControllerMock.GenericFunc: method is nil but RangerUserNotificationController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockRangerUserNotificationControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockRangerUserNotificationControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.GenericCalls())
func (mock *RangerUserNotificationControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockRangerUserNotificationControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockRangerUserNotificationControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RangerUserNotificationControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RangerUserNotificationControllerMock.InformerFunc: method is nil but RangerUserNotificationController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRangerUserNotificationControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRangerUserNotificationControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.InformerCalls())
func (mock *RangerUserNotificationControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRangerUserNotificationControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRangerUserNotificationControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *RangerUserNotificationControllerMock) Lister() v31.RangerUserNotificationLister {
	if mock.ListerFunc == nil {
		panic("RangerUserNotificationControllerMock.ListerFunc: method is nil but RangerUserNotificationController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockRangerUserNotificationControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockRangerUserNotificationControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//
//	len(mockedRangerUserNotificationController.ListerCalls())
func (mock *RangerUserNotificationControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockRangerUserNotificationControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockRangerUserNotificationControllerMockLister.RUnlock()
	return calls
}

var (
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddFeatureHandler                sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddHandler                       sync.RWMutex
	lockRangerUserNotificationInterfaceMockAddLifecycle                     sync.RWMutex
	lockRangerUserNotificationInterfaceMockController                       sync.RWMutex
	lockRangerUserNotificationInterfaceMockCreate                           sync.RWMutex
	lockRangerUserNotificationInterfaceMockDelete                           sync.RWMutex
	lockRangerUserNotificationInterfaceMockDeleteCollection                 sync.RWMutex
	lockRangerUserNotificationInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockRangerUserNotificationInterfaceMockGet                              sync.RWMutex
	lockRangerUserNotificationInterfaceMockGetNamespaced                    sync.RWMutex
	lockRangerUserNotificationInterfaceMockList                             sync.RWMutex
	lockRangerUserNotificationInterfaceMockListNamespaced                   sync.RWMutex
	lockRangerUserNotificationInterfaceMockObjectClient                     sync.RWMutex
	lockRangerUserNotificationInterfaceMockUpdate                           sync.RWMutex
	lockRangerUserNotificationInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that RangerUserNotificationInterfaceMock does implement v31.RangerUserNotificationInterface.
// If this is not the case, regenerate this file with moq.
var _ v31.RangerUserNotificationInterface = &RangerUserNotificationInterfaceMock{}

// RangerUserNotificationInterfaceMock is a mock implementation of v31.RangerUserNotificationInterface.
//
//	    func TestSomethingThatUsesRangerUserNotificationInterface(t *testing.T) {
//
//	        // make and configure a mocked v31.RangerUserNotificationInterface
//	        mockedRangerUserNotificationInterface := &RangerUserNotificationInterfaceMock{
//	            AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddClusterScopedFeatureHandler method")
//	            },
//	            AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.RangerUserNotificationLifecycle)  {
//		               panic("mock out the AddClusterScopedFeatureLifecycle method")
//	            },
//	            AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, syncMoqParam v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddClusterScopedHandler method")
//	            },
//	            AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v31.RangerUserNotificationLifecycle)  {
//		               panic("mock out the AddClusterScopedLifecycle method")
//	            },
//	            AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddFeatureHandler method")
//	            },
//	            AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v31.RangerUserNotificationLifecycle)  {
//		               panic("mock out the AddFeatureLifecycle method")
//	            },
//	            AddHandlerFunc: func(ctx context.Context, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc)  {
//		               panic("mock out the AddHandler method")
//	            },
//	            AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v31.RangerUserNotificationLifecycle)  {
//		               panic("mock out the AddLifecycle method")
//	            },
//	            ControllerFunc: func() v31.RangerUserNotificationController {
//		               panic("mock out the Controller method")
//	            },
//	            CreateFunc: func(in1 *v3.RangerUserNotification) (*v3.RangerUserNotification, error) {
//		               panic("mock out the Create method")
//	            },
//	            DeleteFunc: func(name string, options *metav1.DeleteOptions) error {
//		               panic("mock out the Delete method")
//	            },
//	            DeleteCollectionFunc: func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
//		               panic("mock out the DeleteCollection method")
//	            },
//	            DeleteNamespacedFunc: func(namespace string, name string, options *metav1.DeleteOptions) error {
//		               panic("mock out the DeleteNamespaced method")
//	            },
//	            GetFunc: func(name string, opts metav1.GetOptions) (*v3.RangerUserNotification, error) {
//		               panic("mock out the Get method")
//	            },
//	            GetNamespacedFunc: func(namespace string, name string, opts metav1.GetOptions) (*v3.RangerUserNotification, error) {
//		               panic("mock out the GetNamespaced method")
//	            },
//	            ListFunc: func(opts metav1.ListOptions) (*v3.RangerUserNotificationList, error) {
//		               panic("mock out the List method")
//	            },
//	            ListNamespacedFunc: func(namespace string, opts metav1.ListOptions) (*v3.RangerUserNotificationList, error) {
//		               panic("mock out the ListNamespaced method")
//	            },
//	            ObjectClientFunc: func() *objectclient.ObjectClient {
//		               panic("mock out the ObjectClient method")
//	            },
//	            UpdateFunc: func(in1 *v3.RangerUserNotification) (*v3.RangerUserNotification, error) {
//		               panic("mock out the Update method")
//	            },
//	            WatchFunc: func(opts metav1.ListOptions) (watch.Interface, error) {
//		               panic("mock out the Watch method")
//	            },
//	        }
//
//	        // use mockedRangerUserNotificationInterface in code that requires v31.RangerUserNotificationInterface
//	        // and then make assertions.
//
//	    }
type RangerUserNotificationInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.RangerUserNotificationHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.RangerUserNotificationLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, syncMoqParam v31.RangerUserNotificationHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v31.RangerUserNotificationLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v31.RangerUserNotificationLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v31.RangerUserNotificationLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v31.RangerUserNotificationController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.RangerUserNotification) (*v3.RangerUserNotification, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *metav1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *metav1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts metav1.GetOptions) (*v3.RangerUserNotification, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts metav1.GetOptions) (*v3.RangerUserNotification, error)

	// ListFunc mocks the List method.
	ListFunc func(opts metav1.ListOptions) (*v3.RangerUserNotificationList, error)

	// ListNamespacedFunc mocks the ListNamespaced method.
	ListNamespacedFunc func(namespace string, opts metav1.ListOptions) (*v3.RangerUserNotificationList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.RangerUserNotification) (*v3.RangerUserNotification, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts metav1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v31.RangerUserNotificationHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.RangerUserNotificationLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v31.RangerUserNotificationHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.RangerUserNotificationLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.RangerUserNotificationHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.RangerUserNotificationLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v31.RangerUserNotificationHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v31.RangerUserNotificationLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.RangerUserNotification
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *metav1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts metav1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *metav1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts metav1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ListNamespaced holds details about calls to the ListNamespaced method.
		ListNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.RangerUserNotification
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts metav1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, syncMoqParam v31.RangerUserNotificationHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but RangerUserNotificationInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        syncMoqParam,
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, syncMoqParam)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v31.RangerUserNotificationLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but RangerUserNotificationInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v31.RangerUserNotificationLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v31.RangerUserNotificationLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v31.RangerUserNotificationLifecycle
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockRangerUserNotificationInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, syncMoqParam v31.RangerUserNotificationHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddClusterScopedHandlerFunc: method is nil but RangerUserNotificationInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        syncMoqParam,
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRangerUserNotificationInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, syncMoqParam)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddClusterScopedHandlerCalls())
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRangerUserNotificationInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v31.RangerUserNotificationLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but RangerUserNotificationInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v31.RangerUserNotificationLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockRangerUserNotificationInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddClusterScopedLifecycleCalls())
func (mock *RangerUserNotificationInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v31.RangerUserNotificationLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v31.RangerUserNotificationLifecycle
	}
	lockRangerUserNotificationInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockRangerUserNotificationInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RangerUserNotificationInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddFeatureHandlerFunc: method is nil but RangerUserNotificationInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    syncMoqParam,
	}
	lockRangerUserNotificationInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRangerUserNotificationInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, syncMoqParam)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddFeatureHandlerCalls())
func (mock *RangerUserNotificationInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRangerUserNotificationInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *RangerUserNotificationInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v31.RangerUserNotificationLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddFeatureLifecycleFunc: method is nil but RangerUserNotificationInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v31.RangerUserNotificationLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRangerUserNotificationInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockRangerUserNotificationInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddFeatureLifecycleCalls())
func (mock *RangerUserNotificationInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v31.RangerUserNotificationLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v31.RangerUserNotificationLifecycle
	}
	lockRangerUserNotificationInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockRangerUserNotificationInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RangerUserNotificationInterfaceMock) AddHandler(ctx context.Context, name string, syncMoqParam v31.RangerUserNotificationHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddHandlerFunc: method is nil but RangerUserNotificationInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v31.RangerUserNotificationHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: syncMoqParam,
	}
	lockRangerUserNotificationInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRangerUserNotificationInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, syncMoqParam)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddHandlerCalls())
func (mock *RangerUserNotificationInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v31.RangerUserNotificationHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v31.RangerUserNotificationHandlerFunc
	}
	lockRangerUserNotificationInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRangerUserNotificationInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *RangerUserNotificationInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v31.RangerUserNotificationLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("RangerUserNotificationInterfaceMock.AddLifecycleFunc: method is nil but RangerUserNotificationInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v31.RangerUserNotificationLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRangerUserNotificationInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockRangerUserNotificationInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.AddLifecycleCalls())
func (mock *RangerUserNotificationInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v31.RangerUserNotificationLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v31.RangerUserNotificationLifecycle
	}
	lockRangerUserNotificationInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockRangerUserNotificationInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *RangerUserNotificationInterfaceMock) Controller() v31.RangerUserNotificationController {
	if mock.ControllerFunc == nil {
		panic("RangerUserNotificationInterfaceMock.ControllerFunc: method is nil but RangerUserNotificationInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockRangerUserNotificationInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockRangerUserNotificationInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.ControllerCalls())
func (mock *RangerUserNotificationInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockRangerUserNotificationInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockRangerUserNotificationInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RangerUserNotificationInterfaceMock) Create(in1 *v3.RangerUserNotification) (*v3.RangerUserNotification, error) {
	if mock.CreateFunc == nil {
		panic("RangerUserNotificationInterfaceMock.CreateFunc: method is nil but RangerUserNotificationInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.RangerUserNotification
	}{
		In1: in1,
	}
	lockRangerUserNotificationInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRangerUserNotificationInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.CreateCalls())
func (mock *RangerUserNotificationInterfaceMock) CreateCalls() []struct {
	In1 *v3.RangerUserNotification
} {
	var calls []struct {
		In1 *v3.RangerUserNotification
	}
	lockRangerUserNotificationInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockRangerUserNotificationInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RangerUserNotificationInterfaceMock) Delete(name string, options *metav1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RangerUserNotificationInterfaceMock.DeleteFunc: method is nil but RangerUserNotificationInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *metav1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRangerUserNotificationInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRangerUserNotificationInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.DeleteCalls())
func (mock *RangerUserNotificationInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *metav1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *metav1.DeleteOptions
	}
	lockRangerUserNotificationInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockRangerUserNotificationInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *RangerUserNotificationInterfaceMock) DeleteCollection(deleteOpts *metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("RangerUserNotificationInterfaceMock.DeleteCollectionFunc: method is nil but RangerUserNotificationInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockRangerUserNotificationInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockRangerUserNotificationInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.DeleteCollectionCalls())
func (mock *RangerUserNotificationInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *metav1.DeleteOptions
	ListOpts   metav1.ListOptions
} {
	var calls []struct {
		DeleteOpts *metav1.DeleteOptions
		ListOpts   metav1.ListOptions
	}
	lockRangerUserNotificationInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockRangerUserNotificationInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *RangerUserNotificationInterfaceMock) DeleteNamespaced(namespace string, name string, options *metav1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("RangerUserNotificationInterfaceMock.DeleteNamespacedFunc: method is nil but RangerUserNotificationInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRangerUserNotificationInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockRangerUserNotificationInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.DeleteNamespacedCalls())
func (mock *RangerUserNotificationInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *metav1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *metav1.DeleteOptions
	}
	lockRangerUserNotificationInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockRangerUserNotificationInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RangerUserNotificationInterfaceMock) Get(name string, opts metav1.GetOptions) (*v3.RangerUserNotification, error) {
	if mock.GetFunc == nil {
		panic("RangerUserNotificationInterfaceMock.GetFunc: method is nil but RangerUserNotificationInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts metav1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockRangerUserNotificationInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRangerUserNotificationInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.GetCalls())
func (mock *RangerUserNotificationInterfaceMock) GetCalls() []struct {
	Name string
	Opts metav1.GetOptions
} {
	var calls []struct {
		Name string
		Opts metav1.GetOptions
	}
	lockRangerUserNotificationInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockRangerUserNotificationInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *RangerUserNotificationInterfaceMock) GetNamespaced(namespace string, name string, opts metav1.GetOptions) (*v3.RangerUserNotification, error) {
	if mock.GetNamespacedFunc == nil {
		panic("RangerUserNotificationInterfaceMock.GetNamespacedFunc: method is nil but RangerUserNotificationInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockRangerUserNotificationInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockRangerUserNotificationInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.GetNamespacedCalls())
func (mock *RangerUserNotificationInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      metav1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      metav1.GetOptions
	}
	lockRangerUserNotificationInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockRangerUserNotificationInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RangerUserNotificationInterfaceMock) List(opts metav1.ListOptions) (*v3.RangerUserNotificationList, error) {
	if mock.ListFunc == nil {
		panic("RangerUserNotificationInterfaceMock.ListFunc: method is nil but RangerUserNotificationInterface.List was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	lockRangerUserNotificationInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRangerUserNotificationInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.ListCalls())
func (mock *RangerUserNotificationInterfaceMock) ListCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	lockRangerUserNotificationInterfaceMockList.RLock()
	calls = mock.calls.List
	lockRangerUserNotificationInterfaceMockList.RUnlock()
	return calls
}

// ListNamespaced calls ListNamespacedFunc.
func (mock *RangerUserNotificationInterfaceMock) ListNamespaced(namespace string, opts metav1.ListOptions) (*v3.RangerUserNotificationList, error) {
	if mock.ListNamespacedFunc == nil {
		panic("RangerUserNotificationInterfaceMock.ListNamespacedFunc: method is nil but RangerUserNotificationInterface.ListNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      metav1.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockRangerUserNotificationInterfaceMockListNamespaced.Lock()
	mock.calls.ListNamespaced = append(mock.calls.ListNamespaced, callInfo)
	lockRangerUserNotificationInterfaceMockListNamespaced.Unlock()
	return mock.ListNamespacedFunc(namespace, opts)
}

// ListNamespacedCalls gets all the calls that were made to ListNamespaced.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.ListNamespacedCalls())
func (mock *RangerUserNotificationInterfaceMock) ListNamespacedCalls() []struct {
	Namespace string
	Opts      metav1.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      metav1.ListOptions
	}
	lockRangerUserNotificationInterfaceMockListNamespaced.RLock()
	calls = mock.calls.ListNamespaced
	lockRangerUserNotificationInterfaceMockListNamespaced.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *RangerUserNotificationInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("RangerUserNotificationInterfaceMock.ObjectClientFunc: method is nil but RangerUserNotificationInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockRangerUserNotificationInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockRangerUserNotificationInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.ObjectClientCalls())
func (mock *RangerUserNotificationInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockRangerUserNotificationInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockRangerUserNotificationInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RangerUserNotificationInterfaceMock) Update(in1 *v3.RangerUserNotification) (*v3.RangerUserNotification, error) {
	if mock.UpdateFunc == nil {
		panic("RangerUserNotificationInterfaceMock.UpdateFunc: method is nil but RangerUserNotificationInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.RangerUserNotification
	}{
		In1: in1,
	}
	lockRangerUserNotificationInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRangerUserNotificationInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.UpdateCalls())
func (mock *RangerUserNotificationInterfaceMock) UpdateCalls() []struct {
	In1 *v3.RangerUserNotification
} {
	var calls []struct {
		In1 *v3.RangerUserNotification
	}
	lockRangerUserNotificationInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockRangerUserNotificationInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RangerUserNotificationInterfaceMock) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RangerUserNotificationInterfaceMock.WatchFunc: method is nil but RangerUserNotificationInterface.Watch was just called")
	}
	callInfo := struct {
		Opts metav1.ListOptions
	}{
		Opts: opts,
	}
	lockRangerUserNotificationInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRangerUserNotificationInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//
//	len(mockedRangerUserNotificationInterface.WatchCalls())
func (mock *RangerUserNotificationInterfaceMock) WatchCalls() []struct {
	Opts metav1.ListOptions
} {
	var calls []struct {
		Opts metav1.ListOptions
	}
	lockRangerUserNotificationInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockRangerUserNotificationInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockRangerUserNotificationsGetterMockRangerUserNotifications sync.RWMutex
)

// Ensure, that RangerUserNotificationsGetterMock does implement v31.RangerUserNotificationsGetter.
// If this is not the case, regenerate this file with moq.
var _ v31.RangerUserNotificationsGetter = &RangerUserNotificationsGetterMock{}

// RangerUserNotificationsGetterMock is a mock implementation of v31.RangerUserNotificationsGetter.
//
//	    func TestSomethingThatUsesRangerUserNotificationsGetter(t *testing.T) {
//
//	        // make and configure a mocked v31.RangerUserNotificationsGetter
//	        mockedRangerUserNotificationsGetter := &RangerUserNotificationsGetterMock{
//	            RangerUserNotificationsFunc: func(namespace string) v31.RangerUserNotificationInterface {
//		               panic("mock out the RangerUserNotifications method")
//	            },
//	        }
//
//	        // use mockedRangerUserNotificationsGetter in code that requires v31.RangerUserNotificationsGetter
//	        // and then make assertions.
//
//	    }
type RangerUserNotificationsGetterMock struct {
	// RangerUserNotificationsFunc mocks the RangerUserNotifications method.
	RangerUserNotificationsFunc func(namespace string) v31.RangerUserNotificationInterface

	// calls tracks calls to the methods.
	calls struct {
		// RangerUserNotifications holds details about calls to the RangerUserNotifications method.
		RangerUserNotifications []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// RangerUserNotifications calls RangerUserNotificationsFunc.
func (mock *RangerUserNotificationsGetterMock) RangerUserNotifications(namespace string) v31.RangerUserNotificationInterface {
	if mock.RangerUserNotificationsFunc == nil {
		panic("RangerUserNotificationsGetterMock.RangerUserNotificationsFunc: method is nil but RangerUserNotificationsGetter.RangerUserNotifications was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockRangerUserNotificationsGetterMockRangerUserNotifications.Lock()
	mock.calls.RangerUserNotifications = append(mock.calls.RangerUserNotifications, callInfo)
	lockRangerUserNotificationsGetterMockRangerUserNotifications.Unlock()
	return mock.RangerUserNotificationsFunc(namespace)
}

// RangerUserNotificationsCalls gets all the calls that were made to RangerUserNotifications.
// Check the length with:
//
//	len(mockedRangerUserNotificationsGetter.RangerUserNotificationsCalls())
func (mock *RangerUserNotificationsGetterMock) RangerUserNotificationsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockRangerUserNotificationsGetterMockRangerUserNotifications.RLock()
	calls = mock.calls.RangerUserNotifications
	lockRangerUserNotificationsGetterMockRangerUserNotifications.RUnlock()
	return calls
}
